name: C++ CI

on:
  push:
    branches:
      - main
      - callable_concepts
      - package
      - enhanced-tests
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          # GCC versions
          - name: GCC 12 x86_64
            compiler: gcc-12
            compiler_cxx: g++-12
            is_clang: false
            os: ubuntu-latest
            arch: x86_64
          - name: GCC 12 ARM64
            compiler: gcc-12
            compiler_cxx: g++-12
            is_clang: false
            os: ubuntu-latest
            arch: arm64
          - name: GCC 13 x86_64
            compiler: gcc-13
            compiler_cxx: g++-13
            is_clang: false
            os: ubuntu-latest
            arch: x86_64
          - name: GCC 13 ARM64
            compiler: gcc-13
            compiler_cxx: g++-13
            is_clang: false
            os: ubuntu-latest
            arch: arm64
          - name: GCC 14 x86_64
            compiler: gcc-14
            compiler_cxx: g++-14
            is_clang: false
            os: ubuntu-latest
            arch: x86_64
          - name: GCC 14 ARM64
            compiler: gcc-14
            compiler_cxx: g++-14
            is_clang: false
            os: ubuntu-latest
            arch: arm64
          # Clang versions
          - name: Clang 15 x86_64
            compiler: clang-15
            compiler_cxx: clang++-15
            clang_version: 15
            is_clang: true
            os: ubuntu-latest
            arch: x86_64
          - name: Clang 15 ARM64
            compiler: clang-15
            compiler_cxx: clang++-15
            clang_version: 15
            is_clang: true
            os: ubuntu-latest
            arch: arm64
          - name: Clang 16 x86_64
            compiler: clang-16
            compiler_cxx: clang++-16
            clang_version: 16
            is_clang: true
            os: ubuntu-latest
            arch: x86_64
          - name: Clang 16 ARM64
            compiler: clang-16
            compiler_cxx: clang++-16
            clang_version: 16
            is_clang: true
            os: ubuntu-latest
            arch: arm64
          - name: Clang 17 x86_64
            compiler: clang-17
            compiler_cxx: clang++-17
            clang_version: 17
            is_clang: true
            os: ubuntu-latest
            arch: x86_64
          - name: Clang 17 ARM64
            compiler: clang-17
            compiler_cxx: clang++-17
            clang_version: 17
            is_clang: true
            os: ubuntu-latest
            arch: arm64
          # MSVC versions
          - name: MSVC 2022
            compiler: cl
            compiler_cxx: cl
            is_clang: false
            os: windows-latest
            generator: "Visual Studio 17 2022"
            arch: x64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y sudo git curl wget gnupg lsb-release software-properties-common
        if [ "${{ matrix.compiler }}" = "gcc-14" ]; then
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
        fi
        if [ "${{ matrix.is_clang }}" = "true" ]; then
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-${{ matrix.clang_version }} main" | sudo tee /etc/apt/sources.list.d/llvm.list
          sudo apt-get update
          # Install libc++ for Clang
          sudo apt-get install -y libc++-${{ matrix.clang_version }}-dev libc++abi-${{ matrix.clang_version }}-dev
        fi
        sudo apt-get install -y cmake ninja-build ${{ matrix.compiler }} ${{ matrix.compiler_cxx }}

    - name: Configure and build library
      if: matrix.os == 'ubuntu-latest'
      run: |
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=${{ matrix.compiler }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler_cxx }} \
          -DCMAKE_CXX_STANDARD=23 \
          -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }}
        cmake --build build
        sudo cmake --install build

    - name: Configure and build library (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cmake -B build -G "${{ matrix.generator }}" -A ${{ matrix.arch }} -DCMAKE_CXX_STANDARD=23
        cmake --build build --config Release
        cmake --install build --config Release

    - name: Configure and build tests
      if: matrix.os == 'ubuntu-latest'
      run: |
        cmake -B build_test -G Ninja -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=${{ matrix.compiler }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler_cxx }} \
          -DCMAKE_CXX_STANDARD=23 \
          -DCALLABLE_TRAITS_BUILD_TESTS=ON \
          -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }}
        cmake --build build_test

    - name: Configure and build tests (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cmake -B build_test -G "${{ matrix.generator }}" -A ${{ matrix.arch }} -DCMAKE_CXX_STANDARD=23 -DCALLABLE_TRAITS_BUILD_TESTS=ON
        cmake --build build_test --config Release

    - name: Run tests
      if: matrix.os == 'ubuntu-latest'
      run: ctest --test-dir build_test --output-on-failure

    - name: Run tests (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: ctest --test-dir build_test --build-config Release --output-on-failure

    - name: Expect compile failure for invalid concepts
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p build_test/invalid_test
        cd build_test/invalid_test
        set +e
        cmake ../../test/invalid_test \
          -DCMAKE_C_COMPILER=${{ matrix.compiler }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler_cxx }} \
          -DCMAKE_CXX_STANDARD=23 \
          -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }}
        cmake --build . && echo "❌ invalid_concepts_test compiled successfully — this is an error!" && exit 1
        echo "✅ invalid_concepts_test failed to compile as expected."
