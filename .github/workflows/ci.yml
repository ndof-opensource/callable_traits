name: C++ CI

on:
  push:
    branches:
      - main
      - callable_concepts
      - package
      - enhanced-tests
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          # GCC versions
          - name: GCC 12 x86_64
            compiler: gcc-12
            compiler_cxx: g++-12
            is_clang: false
            os: ubuntu-latest
            arch: x86_64
            platform: linux
          - name: GCC 12 x86_64 (24.04)
            compiler: gcc-12
            compiler_cxx: g++-12
            is_clang: false
            os: ubuntu-24.04
            arch: x86_64
            platform: linux
          - name: GCC 12 ARM64
            compiler: gcc-12
            compiler_cxx: g++-12
            is_clang: false
            os: ubuntu-latest
            arch: arm64
            platform: linux
          - name: GCC 12 ARM64 (24.04)
            compiler: gcc-12
            compiler_cxx: g++-12
            is_clang: false
            os: ubuntu-24.04
            arch: arm64
            platform: linux
          - name: GCC 12 ARM32
            compiler: gcc-12-arm-linux-gnueabihf
            compiler_cxx: g++-12-arm-linux-gnueabihf
            is_clang: false
            os: ubuntu-latest
            arch: armv7
            platform: linux
          - name: GCC 13 x86_64
            compiler: gcc-13
            compiler_cxx: g++-13
            is_clang: false
            os: ubuntu-latest
            arch: x86_64
            platform: linux
          - name: GCC 13 x86_64 (24.04)
            compiler: gcc-13
            compiler_cxx: g++-13
            is_clang: false
            os: ubuntu-24.04
            arch: x86_64
            platform: linux
          - name: GCC 13 ARM64
            compiler: gcc-13
            compiler_cxx: g++-13
            is_clang: false
            os: ubuntu-latest
            arch: arm64
            platform: linux
          - name: GCC 13 ARM64 (24.04)
            compiler: gcc-13
            compiler_cxx: g++-13
            is_clang: false
            os: ubuntu-24.04
            arch: arm64
            platform: linux
          - name: GCC 13 ARM32
            compiler: gcc-13-arm-linux-gnueabihf
            compiler_cxx: g++-13-arm-linux-gnueabihf
            is_clang: false
            os: ubuntu-latest
            arch: armv7
            platform: linux
          - name: GCC 14 x86_64
            compiler: gcc-14
            compiler_cxx: g++-14
            is_clang: false
            os: ubuntu-latest
            arch: x86_64
            platform: linux
          - name: GCC 14 x86_64 (24.04)
            compiler: gcc-14
            compiler_cxx: g++-14
            is_clang: false
            os: ubuntu-24.04
            arch: x86_64
            platform: linux
          - name: GCC 14 ARM64
            compiler: gcc-14
            compiler_cxx: g++-14
            is_clang: false
            os: ubuntu-latest
            arch: arm64
            platform: linux
          - name: GCC 14 ARM64 (24.04)
            compiler: gcc-14
            compiler_cxx: g++-14
            is_clang: false
            os: ubuntu-24.04
            arch: arm64
            platform: linux
          - name: GCC 14 ARM32
            compiler: gcc-14-arm-linux-gnueabihf
            compiler_cxx: g++-14-arm-linux-gnueabihf
            is_clang: false
            os: ubuntu-latest
            arch: armv7
            platform: linux
          # Clang versions
          - name: Clang 15 x86_64
            compiler: clang-15
            compiler_cxx: clang++-15
            clang_version: 15
            is_clang: true
            os: ubuntu-latest
            arch: x86_64
            platform: linux
          - name: Clang 15 x86_64 (24.04)
            compiler: clang-15
            compiler_cxx: clang++-15
            clang_version: 15
            is_clang: true
            os: ubuntu-24.04
            arch: x86_64
            platform: linux
          - name: Clang 15 ARM64
            compiler: clang-15
            compiler_cxx: clang++-15
            clang_version: 15
            is_clang: true
            os: ubuntu-latest
            arch: arm64
            platform: linux
          - name: Clang 15 ARM64 (24.04)
            compiler: clang-15
            compiler_cxx: clang++-15
            clang_version: 15
            is_clang: true
            os: ubuntu-24.04
            arch: arm64
            platform: linux
          - name: Clang 15 ARM32
            compiler: clang-15
            compiler_cxx: clang++-15
            clang_version: 15
            is_clang: true
            os: ubuntu-latest
            arch: armv7
            platform: linux
          - name: Clang 16 x86_64
            compiler: clang-16
            compiler_cxx: clang++-16
            clang_version: 16
            is_clang: true
            os: ubuntu-latest
            arch: x86_64
            platform: linux
          - name: Clang 16 x86_64 (24.04)
            compiler: clang-16
            compiler_cxx: clang++-16
            clang_version: 16
            is_clang: true
            os: ubuntu-24.04
            arch: x86_64
            platform: linux
          - name: Clang 16 ARM64
            compiler: clang-16
            compiler_cxx: clang++-16
            clang_version: 16
            is_clang: true
            os: ubuntu-latest
            arch: arm64
            platform: linux
          - name: Clang 16 ARM64 (24.04)
            compiler: clang-16
            compiler_cxx: clang++-16
            clang_version: 16
            is_clang: true
            os: ubuntu-24.04
            arch: arm64
            platform: linux
          - name: Clang 16 ARM32
            compiler: clang-16
            compiler_cxx: clang++-16
            clang_version: 16
            is_clang: true
            os: ubuntu-latest
            arch: armv7
            platform: linux
          - name: Clang 17 x86_64
            compiler: clang-17
            compiler_cxx: clang++-17
            clang_version: 17
            is_clang: true
            os: ubuntu-latest
            arch: x86_64
            platform: linux
          - name: Clang 17 x86_64 (24.04)
            compiler: clang-17
            compiler_cxx: clang++-17
            clang_version: 17
            is_clang: true
            os: ubuntu-24.04
            arch: x86_64
            platform: linux
          - name: Clang 17 ARM64
            compiler: clang-17
            compiler_cxx: clang++-17
            clang_version: 17
            is_clang: true
            os: ubuntu-latest
            arch: arm64
            platform: linux
          - name: Clang 17 ARM64 (24.04)
            compiler: clang-17
            compiler_cxx: clang++-17
            clang_version: 17
            is_clang: true
            os: ubuntu-24.04
            arch: arm64
            platform: linux
          - name: Clang 17 ARM32
            compiler: clang-17
            compiler_cxx: clang++-17
            clang_version: 17
            is_clang: true
            os: ubuntu-latest
            arch: armv7
            platform: linux
          - name: Clang 18 x86_64
            compiler: clang-18
            compiler_cxx: clang++-18
            clang_version: 18
            is_clang: true
            os: ubuntu-latest
            arch: x86_64
            platform: linux
          - name: Clang 18 x86_64 (24.04)
            compiler: clang-18
            compiler_cxx: clang++-18
            clang_version: 18
            is_clang: true
            os: ubuntu-24.04
            arch: x86_64
            platform: linux
          - name: Clang 18 ARM64
            compiler: clang-18
            compiler_cxx: clang++-18
            clang_version: 18
            is_clang: true
            os: ubuntu-latest
            arch: arm64
            platform: linux
          - name: Clang 18 ARM64 (24.04)
            compiler: clang-18
            compiler_cxx: clang++-18
            clang_version: 18
            is_clang: true
            os: ubuntu-24.04
            arch: arm64
            platform: linux
          - name: Clang 18 ARM32
            compiler: clang-18
            compiler_cxx: clang++-18
            clang_version: 18
            is_clang: true
            os: ubuntu-latest
            arch: armv7
            platform: linux
          # MSVC versions
          - name: MSVC 2022
            compiler: cl
            compiler_cxx: cl
            is_clang: false
            os: windows-latest
            generator: "Visual Studio 17 2022"
            arch: x64
            platform: windows
          - name: MSVC 2022 (Win 2025)
            compiler: cl
            compiler_cxx: cl
            is_clang: false
            os: windows-2025
            generator: "Visual Studio 17 2022"
            arch: x64
            platform: windows
          # macOS versions
          - name: macOS Intel
            compiler: clang
            compiler_cxx: clang++
            is_clang: true
            os: macos-13
            arch: x86_64
            platform: macos
          - name: macOS Apple Silicon (Latest)
            compiler: clang
            compiler_cxx: clang++
            is_clang: true
            os: macos-latest
            arch: arm64
            platform: macos
          - name: macOS Apple Silicon (14)
            compiler: clang
            compiler_cxx: clang++
            is_clang: true
            os: macos-14
            arch: arm64
            platform: macos
          - name: macOS Apple Silicon (15)
            compiler: clang
            compiler_cxx: clang++
            is_clang: true
            os: macos-15
            arch: arm64
            platform: macos

    runs-on: ${{ matrix.runner || matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install dependencies
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y sudo git curl wget gnupg lsb-release software-properties-common
        # Add Ubuntu toolchain PPA for GCC 14 and ARM32 builds
        if [ "${{ matrix.compiler }}" = "gcc-14" ] || [[ "${{ matrix.arch }}" == "armv7" ]]; then
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
        fi
        if [ "${{ matrix.is_clang }}" = "true" ]; then
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-${{ matrix.clang_version }} main" | sudo tee /etc/apt/sources.list.d/llvm.list
          sudo apt-get update
          # Install libc++ for Clang
          sudo apt-get install -y libc++-${{ matrix.clang_version }}-dev libc++abi-${{ matrix.clang_version }}-dev
          # Install specific Clang version
          sudo apt-get install -y clang-${{ matrix.clang_version }} clang++-${{ matrix.clang_version }}
        fi
        # Install cross-compilation toolchain for ARM32
        if [[ "${{ matrix.arch }}" == "armv7" ]]; then
          # Install the cross-compiler
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
          # Install QEMU for running ARM32 tests
          sudo apt-get install -y qemu-user qemu-user-static
        else
          sudo apt-get install -y cmake ninja-build ${{ matrix.compiler }} ${{ matrix.compiler_cxx }}
        fi

    - name: Configure and build library
      if: matrix.platform == 'linux'
      run: |
        if [[ "${{ matrix.arch }}" == "armv7" ]]; then
          if [[ "${{ matrix.is_clang }}" == "true" ]]; then
            # For Clang ARM32, use the versioned Clang with target triple
            cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER=/usr/bin/clang-${{ matrix.clang_version }} \
              -DCMAKE_CXX_COMPILER=/usr/bin/clang++-${{ matrix.clang_version }} \
              -DCMAKE_CXX_FLAGS="-target arm-linux-gnueabihf" \
              -DCMAKE_C_FLAGS="-target arm-linux-gnueabihf" \
              -DCMAKE_CXX_STANDARD=23 \
              -DCMAKE_SYSTEM_PROCESSOR=armv7
          else
            # For GCC ARM32, use the cross-compiler
            cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER=/usr/bin/arm-linux-gnueabihf-gcc \
              -DCMAKE_CXX_COMPILER=/usr/bin/arm-linux-gnueabihf-g++ \
              -DCMAKE_CXX_STANDARD=23 \
              -DCMAKE_SYSTEM_PROCESSOR=armv7
          fi
        else
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=/usr/bin/${{ matrix.compiler }} \
            -DCMAKE_CXX_COMPILER=/usr/bin/${{ matrix.compiler_cxx }} \
            -DCMAKE_CXX_STANDARD=23 \
            -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }}
        fi
        cmake --build build
        sudo cmake --install build

    - name: Configure and build library (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        cmake -B build -G "${{ matrix.generator }}" -A ${{ matrix.arch }} -DCMAKE_CXX_STANDARD=23
        cmake --build build --config Release
        cmake --install build --config Release

    - name: Configure and build library (macOS)
      if: matrix.platform == 'macos'
      run: |
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=${{ matrix.compiler }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler_cxx }} \
          -DCMAKE_CXX_STANDARD=23 \
          -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=13.0 \
          -DCMAKE_CXX_FLAGS="-std=c++23 -stdlib=libc++ -Wno-unused-command-line-argument" \
          -DCMAKE_C_FLAGS="-Wno-unused-command-line-argument" \
          -DCMAKE_EXE_LINKER_FLAGS="-stdlib=libc++" \
          -DCMAKE_SHARED_LINKER_FLAGS="-stdlib=libc++" \
          -DCMAKE_MODULE_LINKER_FLAGS="-stdlib=libc++" \
          -DCMAKE_STATIC_LINKER_FLAGS="-stdlib=libc++" \
          -DCMAKE_AR_FLAGS=""
        cmake --build build
        sudo cmake --install build

    - name: Configure and build tests
      if: matrix.platform == 'linux'
      run: |
        if [[ "${{ matrix.arch }}" == "armv7" ]]; then
          if [[ "${{ matrix.is_clang }}" == "true" ]]; then
            # For Clang ARM32, use the versioned Clang with target triple
            cmake -B build_test -G Ninja -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER=/usr/bin/clang-${{ matrix.clang_version }} \
              -DCMAKE_CXX_COMPILER=/usr/bin/clang++-${{ matrix.clang_version }} \
              -DCMAKE_CXX_FLAGS="-target arm-linux-gnueabihf" \
              -DCMAKE_C_FLAGS="-target arm-linux-gnueabihf" \
              -DCMAKE_CXX_STANDARD=23 \
              -DCALLABLE_TRAITS_BUILD_TESTS=ON \
              -DCMAKE_SYSTEM_PROCESSOR=armv7 \
              -DCMAKE_CROSSCOMPILING_EMULATOR="qemu-arm;-L;/usr/arm-linux-gnueabihf"
          else
            # For GCC ARM32, use the cross-compiler
            cmake -B build_test -G Ninja -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER=/usr/bin/arm-linux-gnueabihf-gcc \
              -DCMAKE_CXX_COMPILER=/usr/bin/arm-linux-gnueabihf-g++ \
              -DCMAKE_CXX_STANDARD=23 \
              -DCALLABLE_TRAITS_BUILD_TESTS=ON \
              -DCMAKE_SYSTEM_PROCESSOR=armv7 \
              -DCMAKE_CROSSCOMPILING_EMULATOR="qemu-arm;-L;/usr/arm-linux-gnueabihf"
          fi
        else
          cmake -B build_test -G Ninja -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=/usr/bin/${{ matrix.compiler }} \
            -DCMAKE_CXX_COMPILER=/usr/bin/${{ matrix.compiler_cxx }} \
            -DCMAKE_CXX_STANDARD=23 \
            -DCALLABLE_TRAITS_BUILD_TESTS=ON \
            -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }}
        fi
        cmake --build build_test

    - name: Configure and build tests (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        cmake -B build_test -G "${{ matrix.generator }}" -A ${{ matrix.arch }} -DCMAKE_CXX_STANDARD=23 -DCALLABLE_TRAITS_BUILD_TESTS=ON
        cmake --build build_test --config Release

    - name: Configure and build tests (macOS)
      if: matrix.platform == 'macos'
      run: |
        cmake -B build_test -G Ninja -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=${{ matrix.compiler }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler_cxx }} \
          -DCMAKE_CXX_STANDARD=23 \
          -DCALLABLE_TRAITS_BUILD_TESTS=ON \
          -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=13.0 \
          -DCMAKE_CXX_FLAGS="-std=c++23 -stdlib=libc++ -Wno-unused-command-line-argument" \
          -DCMAKE_C_FLAGS="-Wno-unused-command-line-argument" \
          -DCMAKE_EXE_LINKER_FLAGS="-stdlib=libc++" \
          -DCMAKE_SHARED_LINKER_FLAGS="-stdlib=libc++" \
          -DCMAKE_MODULE_LINKER_FLAGS="-stdlib=libc++" \
          -DCMAKE_STATIC_LINKER_FLAGS="-stdlib=libc++" \
          -DCMAKE_AR_FLAGS=""
        cmake --build build_test

    - name: Run tests
      if: matrix.platform == 'linux' || matrix.platform == 'macos'
      run: ctest --test-dir build_test --output-on-failure

    - name: Run tests (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: ctest --test-dir build_test --build-config Release --output-on-failure

    - name: Expect compile failure for invalid concepts
      if: matrix.platform == 'linux' || matrix.platform == 'macos'
      run: |
        mkdir -p build_test/invalid_test
        cd build_test/invalid_test
        set +e
        if [[ "${{ matrix.platform }}" == "linux" ]]; then
          if [[ "${{ matrix.arch }}" == "armv7" ]]; then
            if [[ "${{ matrix.is_clang }}" == "true" ]]; then
              # For Clang ARM32, use the versioned Clang with target triple
              cmake ../../test/invalid_test \
                -DCMAKE_C_COMPILER=/usr/bin/clang-${{ matrix.clang_version }} \
                -DCMAKE_CXX_COMPILER=/usr/bin/clang++-${{ matrix.clang_version }} \
                -DCMAKE_CXX_FLAGS="-target arm-linux-gnueabihf" \
                -DCMAKE_C_FLAGS="-target arm-linux-gnueabihf" \
                -DCMAKE_CXX_STANDARD=23 \
                -DCMAKE_SYSTEM_PROCESSOR=armv7
            else
              # For GCC ARM32, use the cross-compiler
              cmake ../../test/invalid_test \
                -DCMAKE_C_COMPILER=/usr/bin/arm-linux-gnueabihf-gcc \
                -DCMAKE_CXX_COMPILER=/usr/bin/arm-linux-gnueabihf-g++ \
                -DCMAKE_CXX_STANDARD=23 \
                -DCMAKE_SYSTEM_PROCESSOR=armv7
            fi
          else
            cmake ../../test/invalid_test \
              -DCMAKE_C_COMPILER=/usr/bin/${{ matrix.compiler }} \
              -DCMAKE_CXX_COMPILER=/usr/bin/${{ matrix.compiler_cxx }} \
              -DCMAKE_CXX_STANDARD=23 \
              -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }}
          fi
        else
          # macOS configuration
          cmake ../../test/invalid_test -G Ninja \
            -DCMAKE_C_COMPILER=${{ matrix.compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.compiler_cxx }} \
            -DCMAKE_CXX_STANDARD=23 \
            -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=13.0 \
            -DCMAKE_CXX_FLAGS="-std=c++23 -stdlib=libc++ -Wno-unused-command-line-argument" \
            -DCMAKE_C_FLAGS="-Wno-unused-command-line-argument" \
            -DCMAKE_EXE_LINKER_FLAGS="-stdlib=libc++" \
            -DCMAKE_SHARED_LINKER_FLAGS="-stdlib=libc++" \
            -DCMAKE_MODULE_LINKER_FLAGS="-stdlib=libc++" \
            -DCMAKE_STATIC_LINKER_FLAGS="-stdlib=libc++"
        fi
        cmake --build .
        if [ $? -eq 0 ]; then
          echo "❌ invalid_concepts_test compiled successfully — this is an error!"
          exit 1
        fi
        echo "✅ invalid_concepts_test failed to compile as expected."

    - name: Expect compile failure for invalid concepts (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        mkdir -p build_test/invalid_test
        cd build_test/invalid_test
        cmake ../../test/invalid_test -G "${{ matrix.generator }}" -A ${{ matrix.arch }} -DCMAKE_CXX_STANDARD=23
        cmake --build . --config Release
        if ($LASTEXITCODE -eq 0) {
          Write-Host "❌ invalid_concepts_test compiled successfully — this is an error!"
          exit 1
        }
        Write-Host "✅ invalid_concepts_test failed to compile as expected."
        exit 0